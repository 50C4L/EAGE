#include "RenderList.h"
#include "../manager/TextureManager.h"

RenderList::RenderList()
{
	_texId = -1;
}

RenderList::~RenderList()
{
}

void RenderList::setId( int id )
{
	_texId = id;
}

void RenderList::push( GameObject* obj )
{
	if( obj->isDynamic() )
		_dynamicList.push_back( obj );
	else
	{
		_staticList.push_back( obj );
		_vertices.push_back( obj->_LT );
		_vertices.push_back( obj->_LB );
		_vertices.push_back( obj->_RB );
		_vertices.push_back( obj->_RB );
		_vertices.push_back( obj->_RT );
		_vertices.push_back( obj->_LT );
	}
}

void RenderList::render()
{
	TextureManager::getInstance()->bind( _texId );
	if( !_staticList.empty() )
	{
		glVertexPointer( 3, GL_FLOAT, sizeof(VertexAttribute), &_vertices[0].pos );
		glTexCoordPointer( 2, GL_FLOAT, sizeof(VertexAttribute), &_vertices[0].uv );
		glDrawArrays( GL_TRIANGLES, 0, _vertices.size() );
	}
	if( !_dynamicList.empty() )
	{
		std::for_each( _dynamicList.begin(), _dynamicList.end(), DynamicRenderer() );
	}
}

void RenderList::clear()
{
	_texId = -1;
	std::for_each( _staticList.begin(), _staticList.end(), Deallocator() );
	std::for_each( _dynamicList.begin(), _dynamicList.end(), Deallocator() );
	_staticList.clear();
	_dynamicList.clear();
}

int RenderList::getId()
{
	return _texId;
}