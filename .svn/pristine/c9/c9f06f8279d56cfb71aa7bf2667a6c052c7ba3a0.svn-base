#include "PhysicsModule.h"
#include "../manager/AnimationManager.h"

void eage::pausePhysics( bool value )
{
	PhysicsModule::getInstance()->pause( value );
}

void eage::setGameSpeed( float value )
{
	PhysicsModule::getInstance()->setSpeed( value );
	AnimationManager::getInstance()->setSpeed( value );
}

void eage::setGravity( float x, float y )
{
	PhysicsModule::getInstance()->setGravity( sf::Vector2f(x,y) );
}

void eage::appendContactListener( b2ContactListener* ptr )
{
	PhysicsModule::getInstance()->getWorld()->SetContactListener( ptr );
}


PhysicsModule* PhysicsModule::_instance = 0;

PhysicsModule* PhysicsModule::getInstance()
{
	if( !_instance )	_instance = new PhysicsModule();
	return _instance;
}

PhysicsModule::PhysicsModule()
{
	_currentFPS = 60.0f;
	_isPause	= false;
	_gameSpeed	= 1.0f;
	_env		= 0;
}

PhysicsModule::~PhysicsModule()
{
}

bool PhysicsModule::initialize( float frequency, int vecIteration, int posIteration )
{
	_env = Environment::getInstance();
	_world = new b2World( b2Vec2( 0.0f, 0.0f ) );
	_frequency = frequency;
	_velocityIteration = vecIteration;
	_positionIteration = posIteration;
	return true;
}


void PhysicsModule::activate( )
{
	if( _world )
	{
		_world->Step( _frequency, _velocityIteration, _positionIteration );
	}		
	else 
		eage::debug( "<ERROR> Physics Module: Can not find valid physics world.\n" );
}

void PhysicsModule::shutdown()
{
}

void PhysicsModule::setSpeed( float value )
{
	_gameSpeed = value;
}

void PhysicsModule::setGravity( sf::Vector2f value )
{
	//_gravity = value;
	//_env->setGravity( value.x, value.y );
	_world->SetGravity( b2Vec2( value.x, value.y ) );
	
	eage::debug( "Physics Module: Gravity is set to (%.2f,%.2f).\n", value.x, value.y );
}

void PhysicsModule::setFPS( float value )
{
	_currentFPS = value;
}


// return pointer of b2World
b2World* PhysicsModule::getWorld()
{
	if( _world )
		return _world;
	else 
		return 0;
}


void PhysicsModule::addObject( GameObject* obj )
{
	if( obj && obj->isPhysx() )
	{
		obj->createB2DBody();
		_objectList.push_back( obj );
	}
	else
		eage::debug( "<ERROR> Physics Module: Invalid game object.\n" );
}

void PhysicsModule::clear()
{
	_objectList.clear();
}

void PhysicsModule::pause( bool value )
{
	_isPause = value;
}

void PhysicsModule::update()
{
	if( !_isPause )
	{
		//// calculation for object's velocity
		//sf::Vector2f GPF = _env->gravity()/_currentFPS;
		//if( !_objectList.empty() )
		//{
		//	std::list<GameObject*>::iterator i = _objectList.begin();
		//	while( i != _objectList.end() )
		//	{
		//		if( (*i)->_physxBody.IsDynamic )
		//		{
		//			(*i)->_physxBody.accumulation += GPF + (*i)->_physxBody.acceleration/_currentFPS;
		//			sf::Vector2f temp;
		//			temp = (*i)->_physxBody.uniform * (*i)->_physxBody.currentSpeed;
		//			temp = temp/_currentFPS + (*i)->_physxBody.accumulation;
		//			(*i)->_physxBody.history = temp;
		//			(*i)->setTranslate( temp * _gameSpeed );
		//		}
		//		++i;
		//	}
		//}

		// get results from Box2D engine
		//for( b2Body* bodyIt = _world->GetBodyList(); bodyIt != NULL; bodyIt = bodyIt->GetNext() )
		//{
		//	// dynmaic objects
		//	if( bodyIt->GetType() == b2_dynamicBody )
		//	{
		//		GameObject* tempObj = static_cast<GameObject*>(bodyIt->GetUserData());
		//		if( tempObj != NULL )
		//		{
		//			sf::Vector2f currentPos;
		//			currentPos.x = bodyIt->GetPosition().x * B2D_COORD_SCALE;
		//			currentPos.y = bodyIt->GetPosition().y * B2D_COORD_SCALE;
		//			tempObj->setTranslate( currentPos );

		//			float degrees = bodyIt->GetAngle()*180.0f/b2_pi;
		//			if( degrees <= 0 ) degrees += 360;
		//			else if( degrees > 360 ) degrees -= 360; 
		//			tempObj->setRotation( -degrees, tempObj->getCentre() );
		//		}
		//	}
		//	// statics objects
		//	else
		//	{
		//	}
		//}

		// using object list to get physics results
		if( !_objectList.empty() )
		{
			std::list<GameObject*>::iterator i = _objectList.begin();
			while( i != _objectList.end() )
			{
				if( (*i)->_body->GetType() == b2_dynamicBody )
				{
					b2Body* boytPtr = (*i)->_body;
					sf::Vector2f currentPos;
					currentPos.x = boytPtr->GetPosition().x * B2D_COORD_SCALE;
					currentPos.y = boytPtr->GetPosition().y * B2D_COORD_SCALE;
					(*i)->setTranslate( currentPos );

					float degrees = boytPtr->GetAngle()*180.0f/b2_pi;
					//if( degrees <= 0.f ) degrees += 360.0f;
					//else if( degrees > 360.0f ) degrees -= 360.0f; 
					(*i)->setRotation( -degrees, (*i)->getCentre() );
				}
				++i;
			}
		}
	}
}
