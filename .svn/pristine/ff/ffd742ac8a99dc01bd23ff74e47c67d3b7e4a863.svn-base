#include "FrameBufferObject.h"

FrameBufferObject::FrameBufferObject( GLint width, GLint height, GLfloat filterMode  )
{
	_width	= width;
	_height	= height;
	_status	= false;

	// create a texture object
	glGenTextures( 1, &_texId );
	glBindTexture( GL_TEXTURE_2D, _texId );
	glTexParameterf( GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, filterMode );
	glTexParameterf( GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, filterMode );
	glTexParameterf( GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE );
	glTexParameterf( GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE );
	glTexImage2D( GL_TEXTURE_2D, 0, GL_RGBA8, _width, _height, 0, GL_RGBA, GL_UNSIGNED_BYTE, 0 );
	glBindTexture( GL_TEXTURE_2D, 0 );

	// create a renderbuffer object to store depth info
	/*
	glGenRenderbuffers( 1, &_rboId );
	glBindFramebuffer( GL_RENDERBUFFER, _rboId );
	glRenderbufferStorage( GL_RENDERBUFFER, GL_DEPTH_COMPONENT, _width, _height );
	glBindRenderbuffer( GL_RENDERBUFFER, 0 );
	*/

	// create a framebuffer object
	glGenFramebuffers( 1, &_fboId );
	glBindFramebuffer( GL_FRAMEBUFFER, _fboId );
	
	// attach the texture to FBO color attachment point
	glFramebufferTexture2D( GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, _texId, 0 );

	// attach the renderbuffer to depth attachment point
	//glFramebufferRenderbuffer( GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_RENDERBUFFER, _rboId );

	// check FBO status
	GLenum status = glCheckFramebufferStatus( GL_FRAMEBUFFER );
	if( status == GL_FRAMEBUFFER_COMPLETE )
		_status = true;

	// switch to system provided framebuffer
	glBindFramebuffer( GL_FRAMEBUFFER, 0 );
}

FrameBufferObject::~FrameBufferObject()
{
}

GLuint FrameBufferObject::getRTT()
{
	return _texId;
}

bool FrameBufferObject::getStatus()
{
	return _status;
}

void FrameBufferObject::begin()
{
	glBindFramebuffer( GL_FRAMEBUFFER, _fboId );
}

void FrameBufferObject::end()
{
	glBindFramebuffer( GL_FRAMEBUFFER, 0 );
}