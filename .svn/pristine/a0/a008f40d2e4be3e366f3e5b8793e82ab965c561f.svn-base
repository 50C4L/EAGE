#include "RenderModule.h"
#include "../manager/ShaderManager.h"
#include "../manager/TextureManager.h"
#include "../graphics/FrameBufferObject.h"
#include "../math/PhysicsModule.h"
#include <stdio.h>

// Friendly functions
Camera* eage::getMainCamera()
{
	return RenderModule::getInstance()->getMainCamera();
}

void eage::setRenderMode( EAGE_RENDER_MODE mode )
{
	RenderModule::getInstance()->setRenderState( mode );
}

void eage::setPostFXShader( int id)
{
	RenderModule::getInstance()->setPostFXShader( id );
}

void eage::alphaBlend( bool flag )
{
	RenderModule::getInstance()->alphaBlend( flag );
}

void eage::appendFBAObject( FBAnimObject* obj )
{
	if( obj->isPhysx() )
		PhysicsModule::getInstance()->addObject( obj );
	RenderModule::getInstance()->addFBAnimObject( obj );
}

void eage::appendObject( GameObject* obj )
{
	if( obj->isPhysx() )
		PhysicsModule::getInstance()->addObject( obj );
	RenderModule::getInstance()->addObj( obj );
}

void eage::appendUIObject( UIObject* obj )
{
	RenderModule::getInstance()->addUIObject( obj );
}

void eage::updateVertex( int shaderBlock, int renderList, int renderOffset, VertexAttribute vert )
{
	RenderModule::getInstance()->updateVertex( shaderBlock, renderList, renderOffset, vert );
}

void eage::updateVertex( int shaderBlock, int renderList, int renderOffset, Texcoord uv )
{
	RenderModule::getInstance()->updateVertex( shaderBlock, renderList, renderOffset, uv );
}


void eage::updateVertex( int shaderBlock, int renderList, int renderOffset, Color color )
{
	RenderModule::getInstance()->updateVertex( shaderBlock, renderList, renderOffset, color );
}


void eage::appendUIWidget(std::shared_ptr<sfg::Widget> widget)
{
	RenderModule::getInstance()->appendSFGUIWidget( widget );
}


void eage::removeUIWidget( std::shared_ptr<sfg::Widget> widget )
{
	RenderModule::getInstance()->_desk->Remove( widget );
}


sfg::Desktop* eage::getUIDesktop()
{
	return RenderModule::getInstance()->_desk;
}


void eage::drawLine( sf::Vector2f begin, sf::Vector2f end, float r, float g, float b, float a )
{
	float vert[6]	= { begin.x, begin.y, 1.0f, end.x, end.y, 1.0f };
	float coord[4]	= { 1.0f, 1.0f, 1.0f, 1.0f };
	float color[8]	= { r,g,b,a, r,g,b,a };

	glVertexPointer( 3, GL_FLOAT, 0, vert );
	glColorPointer( 4, GL_FLOAT, 0, color );
	glTexCoordPointer( 2, GL_FLOAT, 0, coord );
	glDrawArrays( GL_LINE, 0, 2 );
}

////////////////////////////////////////////////////////////////////////////////////////////////

RenderModule* RenderModule::_instance = 0;

RenderModule* RenderModule::getInstance()
{
	if( !_instance ) _instance = new RenderModule();
	return _instance;
}

RenderModule::RenderModule()
{
	_tmPtr			= 0;
	_shaMan			= 0;
	_rlMan			= 0;
	_uioMan			= 0;
	_aniMan			= 0;
	_wnd			= 0;
	_fps			= 60.0f;
	_aspect			= 0.0f;
	_postFBO		= 0;
	_postShader		= 0;
	_mainCamera		= 0;
	_isPostFX		= false;
	_isListReady	= false;
	_isAlphaBlend	= false;
	_fullScreenQuad = 0;
}



RenderModule::~RenderModule()
{
}


bool RenderModule::initialize( TextureManager* tmPtr )
{
	_tmPtr = tmPtr;

	eage::debug( "Render Module: Instancing render list manager ......\n" );
	_rlMan = ShaderBlockManager::getInstanc();

	eage::debug( "Render Module: Instancing UI object manager ......\n" );
	_uioMan = UIObjectManager::getInstance();
	//if( !_uioMan->initialize() )
	//	return false;

	eage::debug( "Render Module: Instancing animation object manager ......\n" );
	_aniMan	= AnimationManager::getInstance();

	eage::debug( "Render Module: Initializing shader manager ......\n" );
	_shaMan = ShaderManager::getInstance();

	eage::debug( "Render Module: Initializing main camera ......\n" );
	_mainCamera = new Camera();

	eage::debug( "Render Module: Initializing SFGUI .....\n" );
	_sfgui = new sfg::SFGUI();
	_desk = new sfg::Desktop();

	return true;
}

Camera* RenderModule::getMainCamera()
{
	if( !_mainCamera )	_mainCamera = new Camera();
	return _mainCamera;
}



void RenderModule::shutdown()
{
	if( _rlMan )
		delete _rlMan;
	if( _uioMan )
		delete _uioMan;
	if( _aniMan )
		delete _aniMan;
	if( _shaMan )
		delete _shaMan;

	_rlMan	= 0;
	_uioMan = 0;
	_aniMan = 0;
	_shaMan = 0;
}

void RenderModule::create()
{
	if( _shaMan->rebuild() )
	{
		eage::debug( "Render Module: Generating render lists...\n" );
		int listNum = _rlMan->genLists();
		eage::debug( "Render Module: %d render lists have been generated\n", listNum );
		int objNum = _rlMan->classifyObjects();
		eage::debug( "Render Module: %d objects have been classified\n", objNum );
	}
	else
	{
		eage::debug( "<ERROR> Shader Manager: Failed to load default shader.\n" );
		return;
	}
}


bool RenderModule::renderSplash( float deltaTime, float length )
{
	if( deltaTime <= 0.0 )
		deltaTime = 0.05f;

	int counter				= int(length*1000.0f/deltaTime);
	//eage::debug( "Counter: %f\n", deltaTime );
	static int frameCount	= 0;
	static bool firstTime	= true;
	//float fadein			= length/3.0f * fps;
	//float fadeout			= length/3.0f * fps;
	float fadein			= (length*1000.0f/deltaTime)/3.0f;

	frameCount++;

	if( frameCount >= counter )
	{
		//_tmPtr->clear();
		_tmPtr->unload( 9999 );
		_shaMan->release( 9999 );
		glDisable( GL_BLEND );
		glEnable( GL_DEPTH_TEST );
		return false;
	}
	if( firstTime )
	{
		eage::debug( "Render Module: Preparing splash screen\n" );
		_tmPtr->loadFromFile( "data/textures/splash.png", 9999, GL_LINEAR );
		_shaMan->loadFromFile( "data/shaders/AlphaFading_Texture.so", 9999 );
		firstTime = false;
	}

	glEnable( GL_BLEND );   
	glDisable( GL_DEPTH_TEST );
	glBlendFunc( GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA );
	glPushMatrix();
	glLoadIdentity();
	glOrtho( 0, 1, 0, 1, -1, 1 );

	// banner
	static float alpha = 0.0f;
	_shaMan->find( 9999 )->uniform( "alpha", alpha );
	_shaMan->bind( 9999 );
	_tmPtr->bind( 9999 );
	glBegin( GL_QUADS );
		glTexCoord2f( 0.0, 1.0 );
		glVertex3f( 0.0, 1.0, 0.0f );
		glTexCoord2f( 0.0, 0.0 );
		glVertex3f( 0.0, 0.0, 0.0f );
		glTexCoord2f( 1.0, 0.0 );
		glVertex3f( 1.0, 0.0, 0.0f );
		glTexCoord2f( 1.0 ,1.0 );
		glVertex3f( 1.0 , 1.0, 0.0f );
	glEnd();
	_shaMan->disable();
	
	if( alpha <= 1.0f )
		alpha += 1.0f/fadein;

	glPopMatrix();

	return true;
}

void RenderModule::setRenderState( EAGE_RENDER_MODE mode )
{
	switch( mode )
	{
	case EAGE_DIRECT_RENDER:
		{
			_isPostFX = false;
			eage::debug( "Render Module: Render mode is direct rendering.\n" );
			break;
		}
	case EAGE_POST_EFFECT:
		{
			// create a frame buffer object and a full screen quad for post rendering
			if( !_postFBO )
				_postFBO = new FrameBufferObject( _wnd->getSize().x, _wnd->getSize().y, GL_LINEAR );

			if (!_postFBO->getStatus())
			{
				eage::debug( "<ERROR> Failed to create FBO.\n" );
				_isPostFX = false;
				return;
			}

			if (!_fullScreenQuad)
			{
				_fullScreenQuad = new GameObject();
				_fullScreenQuad->setSize(sf::Vector2f(0.0f, (float)_wnd->getSize().y),							// left top
					sf::Vector2f(0.0f, 0.0f),												// lefr bottom
					sf::Vector2f((float)_wnd->getSize().x, 0.0f),							// right bottom
					sf::Vector2f((float)_wnd->getSize().x, (float)_wnd->getSize().y));	// right top
				_fullScreenQuad->setTexture(0);
				_fullScreenQuad->setLayer(0.0);
				_fullScreenQuad->setDynamic( false );
				_fullScreenQuad->setPhysx(false);
			}

			_isPostFX = true;
			eage::debug( "Render Module: Render mode is post process rendering.\n" );
			break;
		}
	case EAGE_WIREFRAME:
		{
			glPolygonMode( GL_FRONT, GL_LINE );
			eage::debug( "Render Module: Render mode is wireframe rendering.\n" );
			break;
		}
	}
}

void RenderModule::setPostFXShader( int shaderId )
{
	_postShader = shaderId;
}

void RenderModule::clear()
{
	_mainCamera->releaseFocus();

	if( _rlMan )
		_rlMan->clearAll();
	if( _uioMan )
		_uioMan->clear();
	if( _aniMan )
		_aniMan->clear();
	if( _shaMan )
		_shaMan->clear();
}

void RenderModule::clearBuffers()
{
	glClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT );
}

void RenderModule::render()
{
	this->_update();
	
	this->enableStates();
	if( !_isPostFX )
	{
		// direct render all objects to screen
		this->clearBuffers();
		_mainCamera->activate( _screenWidth, _screenHeight );
		if( _rlMan )
		{
			_rlMan->renderAll();
		}
	}
	else if( _isPostFX )
	{
		// render the whole scene to a frame buffer object
		_postFBO->begin();
		this->clearBuffers();
		_mainCamera->activate( _screenWidth, _screenHeight );
		if( _rlMan )
		{
			_rlMan->renderAll();
		}
		_postFBO->end();

		this->clearBuffers();
		_shaMan->bind( _postShader );
			this->_renderToFullScreenQuad( _postFBO->getRTT() );
		_shaMan->disable();
	}
	this->disableStates();

	this->renderGUI( (float)_frameInterval/1000000.f );
}

void RenderModule::renderGUI( float sec )
{
	_wnd->pushGLStates();
		glDisable( GL_DEPTH_TEST );
		_desk->Update( sec );
		_sfgui->Display( *_wnd );
	_wnd->popGLStates();
}


void RenderModule::alphaBlend( bool flag )
{
	_isAlphaBlend = flag;
	//if( flag )
	//{
	//	glEnable( GL_BLEND );   
	//	glDisable( GL_DEPTH_TEST );
	//	glBlendFunc( GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA );
	//}
	//else
	//{
	//	glDisable( GL_BLEND );   
	//	glEnable( GL_DEPTH_TEST );
	//	//glBlendFunc( GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA );
	//}
}


void RenderModule::appendSFGUIWidget( std::shared_ptr<sfg::Widget> widget )
{
	if( _desk )
		_desk->Add( widget );
}


void RenderModule::addObj( GameObject* obj )
{
	if( _rlMan )
		_rlMan->appendObject( obj );
	else
		eage::debug( "<ERROR> Render Module: Invalid render list manager pointer.\n" );
}

void RenderModule::addUIObject( UIObject* obj )
{
	if( _uioMan )
	{
		_uioMan->registerObject( obj );
	}
	else
		eage::debug( "<ERROR> Render Module: Invalid UI object manager pointer.\n" );
}


void RenderModule::addFBAnimObject( FBAnimObject* obj )
{
	if( _aniMan )
	{
		_aniMan->addFBObject( obj );
		this->addObj( obj );
	}
	else
		eage::debug( "<ERROR> Render Module: Invalid UI object manager pointer.\n" );
}

void RenderModule::addShaderObject( ShaderObject* obj )
{
	if( _shaMan )
	{
	}
}

void RenderModule::updateVertex( int shaderBlock, int renderList, int renderOffset, VertexAttribute vert )
{
	_rlMan->_lists[shaderBlock]._lists[renderList]._dynamicVert[renderOffset] = vert;
}

void RenderModule::updateVertex( int shaderBlock, int renderList, int renderOffset, Texcoord uv )
{
	_rlMan->_lists[shaderBlock]._lists[renderList]._dynamicVert[renderOffset].uv = uv;
}

void RenderModule::updateVertex( int shaderBlock, int renderList, int renderOffset, Color color )
{
	_rlMan->_lists[shaderBlock]._lists[renderList]._dynamicVert[renderOffset].color = color;
}

void RenderModule::_update()
{
	/*if( _uioMan )
	{
		_uioMan->update( _aspect );
	}
	else
		eage::debug( "<ERROR> Render Module: Invalid UI object manager pointer.\n" );*/

	if( _aniMan )
		_aniMan->update( _fps );
	else
		eage::debug( "<ERROR> Render Module: Invalid animation object manager pointer.\n" );

	_mainCamera->focusFollowedObject();
}

void RenderModule::_renderToFullScreenQuad( GLuint renderTargetTexture )
{
	// fill the full screen quad with render target texture from FBO
	glBindTexture( GL_TEXTURE_2D, renderTargetTexture );
	glPushMatrix();
		glLoadIdentity();
		glOrtho( 0.0, _screenWidth, 0.0, _screenHeight, -1.0, 1.0 );
		_fullScreenQuad->render();
	glPopMatrix();
	glBindTexture( GL_TEXTURE_2D, 0 );
}

void RenderModule::reshape( sf::RenderWindow* wnd )
{
	_wnd = wnd;
	_screenWidth	= (double)wnd->getSize().x;
	_screenHeight	= (double)wnd->getSize().y;

	if( _wnd->getSize().y == 0 )
		_aspect = (GLfloat)_wnd->getSize().x;
	else
		_aspect = (GLfloat)_wnd->getSize().x/(GLfloat)_wnd->getSize().y;

	glViewport( 0, 0, _wnd->getSize().x, _wnd->getSize().y );

	glMatrixMode( GL_MODELVIEW );
	glLoadIdentity();
	glMatrixMode( GL_PROJECTION );
	glLoadIdentity();
	//glOrtho( -1.0, 1.0, -1.0/aspect, 1.0/aspect, 1.0, -10.0 );
	//glOrtho( 0.0, 1.0, 0.0, 1.0/_aspect, 1.0, -10.0 );
	//glOrtho( 0.0, (double)wnd->getSize().x, 0.0, (double)wnd->getSize().y, -1.0, 1.0 );
	_mainCamera->setPosition( sf::Vector2f( float(_screenWidth/2.0), float(_screenHeight/2.0) ) );
	_mainCamera->setViewClip( -1.0, 1.0 );
	_mainCamera->activate( _screenWidth, _screenHeight );

	_uioMan->setRenderWindow( wnd );
}

void RenderModule::gether( double frameInterval )
{
	_frameInterval = frameInterval;
	_fps = 1000000.f/(float)frameInterval;
}

void RenderModule::enableStates()
{
	glPushAttrib( GL_ALL_ATTRIB_BITS );
	glPushClientAttrib( GL_CLIENT_ALL_ATTRIB_BITS );

	//glEnable( GL_DEPTH_TEST );
	//glDepthFunc( GL_LEQUAL );
	//glHint( GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST );
	glEnableClientState( GL_VERTEX_ARRAY );
	glEnableClientState( GL_TEXTURE_COORD_ARRAY );
	glEnable( GL_TEXTURE_2D );

	if( _isAlphaBlend )
	{
		glEnable( GL_BLEND );   
		glDisable( GL_DEPTH_TEST );
		glBlendFunc( GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA );
	}
	else
	{
		glDisable( GL_BLEND );   
		glEnable( GL_DEPTH_TEST );
		glDepthFunc( GL_LEQUAL );
		glHint( GL_PERSPECTIVE_CORRECTION_HINT, GL_NICEST );
	}
}

void RenderModule::disableStates()
{
	glDisable( GL_DEPTH_TEST );
	glDisableClientState(GL_VERTEX_ARRAY);
	glDisableClientState(GL_TEXTURE_COORD_ARRAY);
	glDisable(GL_TEXTURE_2D);

	glDisable(GL_BLEND);
	glEnable(GL_DEPTH_TEST);

	glPopAttrib();
	glPopClientAttrib();
}
